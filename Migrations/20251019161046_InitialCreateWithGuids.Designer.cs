// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using backend.Data;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251019161046_InitialCreateWithGuids")]
    partial class InitialCreateWithGuids
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("backend.Models.Clinic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhoneCountryCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("State")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Website")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Clinics");
                });

            modelBuilder.Entity("backend.Models.ClinicType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ClinicTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Özəl sağlamlıq xidmətləri göstərən klinika",
                            IsActive = true,
                            Name = "Xüsusi Klinika"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Dövlət tərəfindən idarə olunan sağlamlıq müəssisəsi",
                            IsActive = true,
                            Name = "Dövlət Klinikası"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Ümumi sağlamlıq xidmətləri göstərən müəssisə",
                            IsActive = true,
                            Name = "Poliklinika"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Diş sağlamlığı xidmətləri",
                            IsActive = true,
                            Name = "Diş Klinikası"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Estetik və gözəllik xidmətləri",
                            IsActive = true,
                            Name = "Gözəllik Mərkəzi"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Tibbi test və analiz xidmətləri",
                            IsActive = true,
                            Name = "Laboratoriya"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Yataqlı müalicə müəssisəsi",
                            IsActive = true,
                            Name = "Xəstəxana"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Digər sağlamlıq xidmətləri",
                            IsActive = true,
                            Name = "Digər"
                        });
                });

            modelBuilder.Entity("backend.Models.Doctor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid?>("ClinicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Gender")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PhoneCountryCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<double>("Rating")
                        .HasPrecision(3, 2)
                        .HasColumnType("float(3)");

                    b.Property<string>("Specialty")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("WorkingHours")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("YearsExperience")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("backend.Models.PlanFeature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPremium")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("PlanFeatures");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "İlk ay üçün pulsuz istifadə",
                            DisplayOrder = 1,
                            IsActive = true,
                            IsPremium = false,
                            Name = "İlk 1 Ay Pulsuz"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Görüşlərin idarə edilməsi",
                            DisplayOrder = 2,
                            IsActive = true,
                            IsPremium = false,
                            Name = "Görüş Ajanda İstifadəsi"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "AI ilə avtomatik xatırlatma",
                            DisplayOrder = 3,
                            IsActive = true,
                            IsPremium = false,
                            Name = "Süni İntellekt Avtomatik Görüş Xatırlatması"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "WhatsApp AI köməkçisi",
                            DisplayOrder = 4,
                            IsActive = true,
                            IsPremium = false,
                            Name = "Whatsapp Süni İntellekt Ağıllı Rəqəmsal Köməkçisi"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Google Calendar inteqrasiyası",
                            DisplayOrder = 5,
                            IsActive = true,
                            IsPremium = false,
                            Name = "Google Təqvim Əlaqəsi"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Detallı təhlil və hesabatlar",
                            DisplayOrder = 6,
                            IsActive = true,
                            IsPremium = false,
                            Name = "Ətraflı Görüş Təhlil Modulu"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Müntəzəm hesabatlar",
                            DisplayOrder = 7,
                            IsActive = true,
                            IsPremium = false,
                            Name = "Gündəlik həftəlik və aylıq kliniklərdəki fəaliyyət hesabatı"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "AI avtomatik mesajlaşma",
                            DisplayOrder = 8,
                            IsActive = true,
                            IsPremium = false,
                            Name = "Ağıllı Süni İntellekt Köməkçisi ilə Avtomatik Ad Günü, Xüsusi Gün, Kampaniya və Xatırlatma Mesajları"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Limitsiz kampaniya yaratma",
                            DisplayOrder = 9,
                            IsActive = true,
                            IsPremium = false,
                            Name = "Sınırsız Ağıllı Kampaniya Xüsusiyyəti"
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "AI telefon təsdiqi",
                            DisplayOrder = 10,
                            IsActive = true,
                            IsPremium = false,
                            Name = "Görüşləri süni intellekt ilə telefon zəngi edərək təsdiqləmə"
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Avtomatik nömrə axtarışı",
                            DisplayOrder = 11,
                            IsActive = true,
                            IsPremium = false,
                            Name = "AI Avtomatik Nömrə Axtarışı və Hesabat Sistemi"
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "1 həkim hesabı",
                            DisplayOrder = 12,
                            IsActive = true,
                            IsPremium = false,
                            Name = "1 Mütəxəssis Həkim Qeydiyyatı"
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "3 həkim hesabı",
                            DisplayOrder = 13,
                            IsActive = true,
                            IsPremium = false,
                            Name = "3 Mütəxəssis Həkim Qeydiyyatı"
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "10 həkim hesabı",
                            DisplayOrder = 14,
                            IsActive = true,
                            IsPremium = true,
                            Name = "10 Mütəxəssis Həkim Qeydiyyatı"
                        });
                });

            modelBuilder.Entity("backend.Models.PlanFeatureMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("FeatureId")
                        .HasColumnType("int");

                    b.Property<int>("PlanId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FeatureId");

                    b.HasIndex("PlanId", "FeatureId")
                        .IsUnique();

                    b.ToTable("PlanFeatureMappings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            FeatureId = 1,
                            PlanId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            FeatureId = 2,
                            PlanId = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            FeatureId = 3,
                            PlanId = 1
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            FeatureId = 4,
                            PlanId = 1
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            FeatureId = 5,
                            PlanId = 1
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            FeatureId = 6,
                            PlanId = 1
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            FeatureId = 7,
                            PlanId = 1
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            FeatureId = 8,
                            PlanId = 1
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            FeatureId = 9,
                            PlanId = 1
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            FeatureId = 10,
                            PlanId = 1
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            FeatureId = 11,
                            PlanId = 1
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            FeatureId = 12,
                            PlanId = 1
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            FeatureId = 1,
                            PlanId = 2
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            FeatureId = 2,
                            PlanId = 2
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            FeatureId = 3,
                            PlanId = 2
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            FeatureId = 4,
                            PlanId = 2
                        },
                        new
                        {
                            Id = 17,
                            CreatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            FeatureId = 5,
                            PlanId = 2
                        },
                        new
                        {
                            Id = 18,
                            CreatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            FeatureId = 6,
                            PlanId = 2
                        },
                        new
                        {
                            Id = 19,
                            CreatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            FeatureId = 7,
                            PlanId = 2
                        },
                        new
                        {
                            Id = 20,
                            CreatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            FeatureId = 8,
                            PlanId = 2
                        },
                        new
                        {
                            Id = 21,
                            CreatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            FeatureId = 9,
                            PlanId = 2
                        },
                        new
                        {
                            Id = 22,
                            CreatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            FeatureId = 10,
                            PlanId = 2
                        },
                        new
                        {
                            Id = 23,
                            CreatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            FeatureId = 11,
                            PlanId = 2
                        },
                        new
                        {
                            Id = 24,
                            CreatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            FeatureId = 13,
                            PlanId = 2
                        },
                        new
                        {
                            Id = 25,
                            CreatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            FeatureId = 1,
                            PlanId = 3
                        },
                        new
                        {
                            Id = 26,
                            CreatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            FeatureId = 2,
                            PlanId = 3
                        },
                        new
                        {
                            Id = 27,
                            CreatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            FeatureId = 3,
                            PlanId = 3
                        },
                        new
                        {
                            Id = 28,
                            CreatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            FeatureId = 4,
                            PlanId = 3
                        },
                        new
                        {
                            Id = 29,
                            CreatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            FeatureId = 5,
                            PlanId = 3
                        },
                        new
                        {
                            Id = 30,
                            CreatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            FeatureId = 6,
                            PlanId = 3
                        },
                        new
                        {
                            Id = 31,
                            CreatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            FeatureId = 7,
                            PlanId = 3
                        },
                        new
                        {
                            Id = 32,
                            CreatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            FeatureId = 8,
                            PlanId = 3
                        },
                        new
                        {
                            Id = 33,
                            CreatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            FeatureId = 9,
                            PlanId = 3
                        },
                        new
                        {
                            Id = 34,
                            CreatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            FeatureId = 10,
                            PlanId = 3
                        },
                        new
                        {
                            Id = 35,
                            CreatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            FeatureId = 11,
                            PlanId = 3
                        },
                        new
                        {
                            Id = 36,
                            CreatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            FeatureId = 14,
                            PlanId = 3
                        });
                });

            modelBuilder.Entity("backend.Models.Subscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AmountPaid")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("AutoRenew")
                        .HasColumnType("bit");

                    b.Property<string>("CancellationReason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("CancelledAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ClinicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvoiceDetails")
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<bool>("IsTrialPeriod")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("NextBillingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("PaddleSubscriptionId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PaddleTransactionId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PlanId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TransactionId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("TrialEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.HasIndex("PlanId");

                    b.HasIndex("Status");

                    b.HasIndex("ClinicId", "Status");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("backend.Models.SubscriptionPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PaddlePriceId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Period")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("SubscriptionPlans");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            Currency = "USD",
                            Description = "Tək həkimli kliniklər üçün",
                            DisplayOrder = 1,
                            IsActive = true,
                            IsFeatured = false,
                            Name = "Başlanğıc",
                            Period = 2,
                            Price = 45.00m
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            Currency = "USD",
                            Description = "3 həkimə qədər olan kliniklər üçün",
                            DisplayOrder = 2,
                            IsActive = true,
                            IsFeatured = true,
                            Name = "Professional",
                            Period = 2,
                            Price = 75.00m
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            Currency = "USD",
                            Description = "10 həkimə qədər olan kliniklər üçün",
                            DisplayOrder = 3,
                            IsActive = true,
                            IsFeatured = false,
                            Name = "Premium",
                            Period = 2,
                            Price = 125.00m
                        });
                });

            modelBuilder.Entity("backend.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PhoneCountryCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("backend.Models.Clinic", b =>
                {
                    b.HasOne("backend.Models.User", "Owner")
                        .WithMany("Clinics")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("backend.Models.Doctor", b =>
                {
                    b.HasOne("backend.Models.Clinic", "Clinic")
                        .WithMany()
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Clinic");
                });

            modelBuilder.Entity("backend.Models.PlanFeatureMapping", b =>
                {
                    b.HasOne("backend.Models.PlanFeature", "Feature")
                        .WithMany("PlanMappings")
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.SubscriptionPlan", "Plan")
                        .WithMany("PlanFeatures")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Feature");

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("backend.Models.Subscription", b =>
                {
                    b.HasOne("backend.Models.Clinic", "Clinic")
                        .WithMany()
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("backend.Models.SubscriptionPlan", "Plan")
                        .WithMany("Subscriptions")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Clinic");

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("backend.Models.PlanFeature", b =>
                {
                    b.Navigation("PlanMappings");
                });

            modelBuilder.Entity("backend.Models.SubscriptionPlan", b =>
                {
                    b.Navigation("PlanFeatures");

                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("backend.Models.User", b =>
                {
                    b.Navigation("Clinics");
                });
#pragma warning restore 612, 618
        }
    }
}
